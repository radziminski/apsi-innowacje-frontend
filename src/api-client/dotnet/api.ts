/* tslint:disable */
/* eslint-disable */
/**
 * apsi.backend.social
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticateDto
 */
export interface AuthenticateDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateDto
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface CreatePostAnswerDto
 */
export interface CreatePostAnswerDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePostAnswerDto
     */
    'text'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePostAnswerDto
     */
    'postId'?: number;
}
/**
 * 
 * @export
 * @interface CreatePostDto
 */
export interface CreatePostDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePostDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePostDto
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePostDto
     */
    'socialGroupName'?: string | null;
}
/**
 * 
 * @export
 * @interface LoggedUserDto
 */
export interface LoggedUserDto {
    /**
     * 
     * @type {number}
     * @memberof LoggedUserDto
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LoggedUserDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoggedUserDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoggedUserDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {UserRole}
     * @memberof LoggedUserDto
     */
    'userRole'?: UserRole;
    /**
     * 
     * @type {string}
     * @memberof LoggedUserDto
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoggedUserDto
     */
    'tokenExpirationDate'?: string;
}
/**
 * 
 * @export
 * @interface PostAnswerDto
 */
export interface PostAnswerDto {
    /**
     * 
     * @type {number}
     * @memberof PostAnswerDto
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PostAnswerDto
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostAnswerDto
     */
    'date'?: string;
    /**
     * 
     * @type {UserDto}
     * @memberof PostAnswerDto
     */
    'author'?: UserDto;
}
/**
 * 
 * @export
 * @interface PostDto
 */
export interface PostDto {
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'date'?: string;
    /**
     * 
     * @type {SocialGroupIdDto}
     * @memberof PostDto
     */
    'socialGroup'?: SocialGroupIdDto;
    /**
     * 
     * @type {UserDto}
     * @memberof PostDto
     */
    'author'?: UserDto;
    /**
     * 
     * @type {Array<PostAnswerDto>}
     * @memberof PostDto
     */
    'postAnswers'?: Array<PostAnswerDto> | null;
}
/**
 * 
 * @export
 * @interface SocialGroupDto
 */
export interface SocialGroupDto {
    /**
     * 
     * @type {string}
     * @memberof SocialGroupDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface SocialGroupIdDto
 */
export interface SocialGroupIdDto {
    /**
     * 
     * @type {number}
     * @memberof SocialGroupIdDto
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SocialGroupIdDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {UserRole}
     * @memberof UserDto
     */
    'userRole'?: UserRole;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum UserRole {
    Student = 'Student',
    Employee = 'Employee',
    Committee = 'Committee',
    Admin = 'Admin'
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateDto} [authenticateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost: async (authenticateDto?: AuthenticateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/Authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetLoggedUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/GetLoggedUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthenticateDto} [authenticateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthenticatePost(authenticateDto?: AuthenticateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoggedUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthenticatePost(authenticateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetLoggedUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetLoggedUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthenticateDto} [authenticateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost(authenticateDto?: AuthenticateDto, options?: any): AxiosPromise<LoggedUserDto> {
            return localVarFp.authAuthenticatePost(authenticateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetLoggedUserGet(options?: any): AxiosPromise<UserDto> {
            return localVarFp.authGetLoggedUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authAuthenticatePost operation in AuthApi.
 * @export
 * @interface AuthApiAuthAuthenticatePostRequest
 */
export interface AuthApiAuthAuthenticatePostRequest {
    /**
     * 
     * @type {AuthenticateDto}
     * @memberof AuthApiAuthAuthenticatePost
     */
    readonly authenticateDto?: AuthenticateDto
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiAuthAuthenticatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authAuthenticatePost(requestParameters: AuthApiAuthAuthenticatePostRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authAuthenticatePost(requestParameters.authenticateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetLoggedUserGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetLoggedUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePostAnswerDto} [createPostAnswerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreatePostAnswerPost: async (createPostAnswerDto?: CreatePostAnswerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/CreatePostAnswer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostAnswerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePostDto} [createPostDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreatePostPost: async (createPostDto?: CreatePostDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/CreatePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeletePostAnswerDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/DeletePostAnswer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeletePostDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/DeletePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetAllGet: async (sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sortDate !== undefined) {
                localVarQueryParameter['SortDate'] = sortDate;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostAnswersCountByPostIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostAnswersCountByPostId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostByIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [authorUsername] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByAnswerAuthorGet: async (authorUsername?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostsByAnswerAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorUsername !== undefined) {
                localVarQueryParameter['AuthorUsername'] = authorUsername;
            }

            if (sortDate !== undefined) {
                localVarQueryParameter['SortDate'] = sortDate;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByAnswerTextGet: async (string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostsByAnswerText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (string !== undefined) {
                localVarQueryParameter['String'] = string;
            }

            if (sortDate !== undefined) {
                localVarQueryParameter['SortDate'] = sortDate;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [authorUsername] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByAuthorGet: async (authorUsername?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostsByAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorUsername !== undefined) {
                localVarQueryParameter['AuthorUsername'] = authorUsername;
            }

            if (sortDate !== undefined) {
                localVarQueryParameter['SortDate'] = sortDate;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByTextGet: async (string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostsByText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (string !== undefined) {
                localVarQueryParameter['String'] = string;
            }

            if (sortDate !== undefined) {
                localVarQueryParameter['SortDate'] = sortDate;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByTitleGet: async (string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostsByTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (string !== undefined) {
                localVarQueryParameter['String'] = string;
            }

            if (sortDate !== undefined) {
                localVarQueryParameter['SortDate'] = sortDate;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/GetPostsCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [answerId] 
         * @param {string} [text] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatePostAnswerPut: async (answerId?: number, text?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/UpdatePostAnswer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (answerId !== undefined) {
                localVarQueryParameter['AnswerId'] = answerId;
            }

            if (text !== undefined) {
                localVarQueryParameter['Text'] = text;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [postId] 
         * @param {string} [title] 
         * @param {string} [text] 
         * @param {string} [socialGroupName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatePostPut: async (postId?: number, title?: string, text?: string, socialGroupName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Post/UpdatePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (postId !== undefined) {
                localVarQueryParameter['PostId'] = postId;
            }

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (text !== undefined) {
                localVarQueryParameter['Text'] = text;
            }

            if (socialGroupName !== undefined) {
                localVarQueryParameter['socialGroupName'] = socialGroupName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePostAnswerDto} [createPostAnswerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreatePostAnswerPost(createPostAnswerDto?: CreatePostAnswerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreatePostAnswerPost(createPostAnswerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePostDto} [createPostDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreatePostPost(createPostDto?: CreatePostDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreatePostPost(createPostDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDeletePostAnswerDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDeletePostAnswerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDeletePostDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDeletePostDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetAllGet(sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetAllGet(sortDate, sortDescending, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostAnswersCountByPostIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostAnswersCountByPostIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostByIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostByIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [authorUsername] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostsByAnswerAuthorGet(authorUsername?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostsByAnswerAuthorGet(authorUsername, sortDate, sortDescending, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostsByAnswerTextGet(string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostsByAnswerTextGet(string, sortDate, sortDescending, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [authorUsername] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostsByAuthorGet(authorUsername?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostsByAuthorGet(authorUsername, sortDate, sortDescending, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostsByTextGet(string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostsByTextGet(string, sortDate, sortDescending, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostsByTitleGet(string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostsByTitleGet(string, sortDate, sortDescending, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGetPostsCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGetPostsCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [answerId] 
         * @param {string} [text] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUpdatePostAnswerPut(answerId?: number, text?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUpdatePostAnswerPut(answerId, text, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [postId] 
         * @param {string} [title] 
         * @param {string} [text] 
         * @param {string} [socialGroupName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUpdatePostPut(postId?: number, title?: string, text?: string, socialGroupName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUpdatePostPut(postId, title, text, socialGroupName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePostAnswerDto} [createPostAnswerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreatePostAnswerPost(createPostAnswerDto?: CreatePostAnswerDto, options?: any): AxiosPromise<number> {
            return localVarFp.postCreatePostAnswerPost(createPostAnswerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePostDto} [createPostDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreatePostPost(createPostDto?: CreatePostDto, options?: any): AxiosPromise<number> {
            return localVarFp.postCreatePostPost(createPostDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeletePostAnswerDelete(id?: number, options?: any): AxiosPromise<number> {
            return localVarFp.postDeletePostAnswerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeletePostDelete(id?: number, options?: any): AxiosPromise<number> {
            return localVarFp.postDeletePostDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetAllGet(sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.postGetAllGet(sortDate, sortDescending, page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostAnswersCountByPostIdGet(id?: number, options?: any): AxiosPromise<number> {
            return localVarFp.postGetPostAnswersCountByPostIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostByIdGet(id?: number, options?: any): AxiosPromise<PostDto> {
            return localVarFp.postGetPostByIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [authorUsername] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByAnswerAuthorGet(authorUsername?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.postGetPostsByAnswerAuthorGet(authorUsername, sortDate, sortDescending, page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByAnswerTextGet(string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.postGetPostsByAnswerTextGet(string, sortDate, sortDescending, page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [authorUsername] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByAuthorGet(authorUsername?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.postGetPostsByAuthorGet(authorUsername, sortDate, sortDescending, page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByTextGet(string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.postGetPostsByTextGet(string, sortDate, sortDescending, page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [string] 
         * @param {boolean} [sortDate] 
         * @param {boolean} [sortDescending] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsByTitleGet(string?: string, sortDate?: boolean, sortDescending?: boolean, page?: number, count?: number, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.postGetPostsByTitleGet(string, sortDate, sortDescending, page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGetPostsCountGet(options?: any): AxiosPromise<number> {
            return localVarFp.postGetPostsCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [answerId] 
         * @param {string} [text] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatePostAnswerPut(answerId?: number, text?: string, options?: any): AxiosPromise<number> {
            return localVarFp.postUpdatePostAnswerPut(answerId, text, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [postId] 
         * @param {string} [title] 
         * @param {string} [text] 
         * @param {string} [socialGroupName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatePostPut(postId?: number, title?: string, text?: string, socialGroupName?: string, options?: any): AxiosPromise<number> {
            return localVarFp.postUpdatePostPut(postId, title, text, socialGroupName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postCreatePostAnswerPost operation in PostApi.
 * @export
 * @interface PostApiPostCreatePostAnswerPostRequest
 */
export interface PostApiPostCreatePostAnswerPostRequest {
    /**
     * 
     * @type {CreatePostAnswerDto}
     * @memberof PostApiPostCreatePostAnswerPost
     */
    readonly createPostAnswerDto?: CreatePostAnswerDto
}

/**
 * Request parameters for postCreatePostPost operation in PostApi.
 * @export
 * @interface PostApiPostCreatePostPostRequest
 */
export interface PostApiPostCreatePostPostRequest {
    /**
     * 
     * @type {CreatePostDto}
     * @memberof PostApiPostCreatePostPost
     */
    readonly createPostDto?: CreatePostDto
}

/**
 * Request parameters for postDeletePostAnswerDelete operation in PostApi.
 * @export
 * @interface PostApiPostDeletePostAnswerDeleteRequest
 */
export interface PostApiPostDeletePostAnswerDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiPostDeletePostAnswerDelete
     */
    readonly id?: number
}

/**
 * Request parameters for postDeletePostDelete operation in PostApi.
 * @export
 * @interface PostApiPostDeletePostDeleteRequest
 */
export interface PostApiPostDeletePostDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiPostDeletePostDelete
     */
    readonly id?: number
}

/**
 * Request parameters for postGetAllGet operation in PostApi.
 * @export
 * @interface PostApiPostGetAllGetRequest
 */
export interface PostApiPostGetAllGetRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetAllGet
     */
    readonly sortDate?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetAllGet
     */
    readonly sortDescending?: boolean

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetAllGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetAllGet
     */
    readonly count?: number
}

/**
 * Request parameters for postGetPostAnswersCountByPostIdGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostAnswersCountByPostIdGetRequest
 */
export interface PostApiPostGetPostAnswersCountByPostIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostAnswersCountByPostIdGet
     */
    readonly id?: number
}

/**
 * Request parameters for postGetPostByIdGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostByIdGetRequest
 */
export interface PostApiPostGetPostByIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostByIdGet
     */
    readonly id?: number
}

/**
 * Request parameters for postGetPostsByAnswerAuthorGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostsByAnswerAuthorGetRequest
 */
export interface PostApiPostGetPostsByAnswerAuthorGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiPostGetPostsByAnswerAuthorGet
     */
    readonly authorUsername?: string

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByAnswerAuthorGet
     */
    readonly sortDate?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByAnswerAuthorGet
     */
    readonly sortDescending?: boolean

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByAnswerAuthorGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByAnswerAuthorGet
     */
    readonly count?: number
}

/**
 * Request parameters for postGetPostsByAnswerTextGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostsByAnswerTextGetRequest
 */
export interface PostApiPostGetPostsByAnswerTextGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiPostGetPostsByAnswerTextGet
     */
    readonly string?: string

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByAnswerTextGet
     */
    readonly sortDate?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByAnswerTextGet
     */
    readonly sortDescending?: boolean

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByAnswerTextGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByAnswerTextGet
     */
    readonly count?: number
}

/**
 * Request parameters for postGetPostsByAuthorGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostsByAuthorGetRequest
 */
export interface PostApiPostGetPostsByAuthorGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiPostGetPostsByAuthorGet
     */
    readonly authorUsername?: string

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByAuthorGet
     */
    readonly sortDate?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByAuthorGet
     */
    readonly sortDescending?: boolean

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByAuthorGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByAuthorGet
     */
    readonly count?: number
}

/**
 * Request parameters for postGetPostsByTextGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostsByTextGetRequest
 */
export interface PostApiPostGetPostsByTextGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiPostGetPostsByTextGet
     */
    readonly string?: string

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByTextGet
     */
    readonly sortDate?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByTextGet
     */
    readonly sortDescending?: boolean

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByTextGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByTextGet
     */
    readonly count?: number
}

/**
 * Request parameters for postGetPostsByTitleGet operation in PostApi.
 * @export
 * @interface PostApiPostGetPostsByTitleGetRequest
 */
export interface PostApiPostGetPostsByTitleGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiPostGetPostsByTitleGet
     */
    readonly string?: string

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByTitleGet
     */
    readonly sortDate?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PostApiPostGetPostsByTitleGet
     */
    readonly sortDescending?: boolean

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByTitleGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostApiPostGetPostsByTitleGet
     */
    readonly count?: number
}

/**
 * Request parameters for postUpdatePostAnswerPut operation in PostApi.
 * @export
 * @interface PostApiPostUpdatePostAnswerPutRequest
 */
export interface PostApiPostUpdatePostAnswerPutRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiPostUpdatePostAnswerPut
     */
    readonly answerId?: number

    /**
     * 
     * @type {string}
     * @memberof PostApiPostUpdatePostAnswerPut
     */
    readonly text?: string
}

/**
 * Request parameters for postUpdatePostPut operation in PostApi.
 * @export
 * @interface PostApiPostUpdatePostPutRequest
 */
export interface PostApiPostUpdatePostPutRequest {
    /**
     * 
     * @type {number}
     * @memberof PostApiPostUpdatePostPut
     */
    readonly postId?: number

    /**
     * 
     * @type {string}
     * @memberof PostApiPostUpdatePostPut
     */
    readonly title?: string

    /**
     * 
     * @type {string}
     * @memberof PostApiPostUpdatePostPut
     */
    readonly text?: string

    /**
     * 
     * @type {string}
     * @memberof PostApiPostUpdatePostPut
     */
    readonly socialGroupName?: string
}

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * 
     * @param {PostApiPostCreatePostAnswerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postCreatePostAnswerPost(requestParameters: PostApiPostCreatePostAnswerPostRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postCreatePostAnswerPost(requestParameters.createPostAnswerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostCreatePostPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postCreatePostPost(requestParameters: PostApiPostCreatePostPostRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postCreatePostPost(requestParameters.createPostDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostDeletePostAnswerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postDeletePostAnswerDelete(requestParameters: PostApiPostDeletePostAnswerDeleteRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postDeletePostAnswerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostDeletePostDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postDeletePostDelete(requestParameters: PostApiPostDeletePostDeleteRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postDeletePostDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetAllGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetAllGet(requestParameters: PostApiPostGetAllGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetAllGet(requestParameters.sortDate, requestParameters.sortDescending, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostAnswersCountByPostIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostAnswersCountByPostIdGet(requestParameters: PostApiPostGetPostAnswersCountByPostIdGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostAnswersCountByPostIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostByIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostByIdGet(requestParameters: PostApiPostGetPostByIdGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostByIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostsByAnswerAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostsByAnswerAuthorGet(requestParameters: PostApiPostGetPostsByAnswerAuthorGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostsByAnswerAuthorGet(requestParameters.authorUsername, requestParameters.sortDate, requestParameters.sortDescending, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostsByAnswerTextGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostsByAnswerTextGet(requestParameters: PostApiPostGetPostsByAnswerTextGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostsByAnswerTextGet(requestParameters.string, requestParameters.sortDate, requestParameters.sortDescending, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostsByAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostsByAuthorGet(requestParameters: PostApiPostGetPostsByAuthorGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostsByAuthorGet(requestParameters.authorUsername, requestParameters.sortDate, requestParameters.sortDescending, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostsByTextGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostsByTextGet(requestParameters: PostApiPostGetPostsByTextGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostsByTextGet(requestParameters.string, requestParameters.sortDate, requestParameters.sortDescending, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostGetPostsByTitleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostsByTitleGet(requestParameters: PostApiPostGetPostsByTitleGetRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostsByTitleGet(requestParameters.string, requestParameters.sortDate, requestParameters.sortDescending, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postGetPostsCountGet(options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postGetPostsCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostUpdatePostAnswerPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postUpdatePostAnswerPut(requestParameters: PostApiPostUpdatePostAnswerPutRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postUpdatePostAnswerPut(requestParameters.answerId, requestParameters.text, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostApiPostUpdatePostPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public postUpdatePostPut(requestParameters: PostApiPostUpdatePostPutRequest = {}, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).postUpdatePostPut(requestParameters.postId, requestParameters.title, requestParameters.text, requestParameters.socialGroupName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SocialGroupApi - axios parameter creator
 * @export
 */
export const SocialGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SocialGroupDto} [socialGroupDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialGroupCreateSocialGroupsPost: async (socialGroupDto?: SocialGroupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SocialGroup/CreateSocialGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialGroupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialGroupSocialGroupsAllGet: async (page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SocialGroup/SocialGroupsAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialGroupSocialGroupsGet: async (name?: string, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SocialGroup/SocialGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialGroupApi - functional programming interface
 * @export
 */
export const SocialGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SocialGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SocialGroupDto} [socialGroupDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialGroupCreateSocialGroupsPost(socialGroupDto?: SocialGroupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialGroupCreateSocialGroupsPost(socialGroupDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialGroupSocialGroupsAllGet(page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SocialGroupIdDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialGroupSocialGroupsAllGet(page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialGroupSocialGroupsGet(name?: string, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SocialGroupIdDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialGroupSocialGroupsGet(name, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SocialGroupApi - factory interface
 * @export
 */
export const SocialGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SocialGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {SocialGroupDto} [socialGroupDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialGroupCreateSocialGroupsPost(socialGroupDto?: SocialGroupDto, options?: any): AxiosPromise<number> {
            return localVarFp.socialGroupCreateSocialGroupsPost(socialGroupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialGroupSocialGroupsAllGet(page?: number, count?: number, options?: any): AxiosPromise<Array<SocialGroupIdDto>> {
            return localVarFp.socialGroupSocialGroupsAllGet(page, count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialGroupSocialGroupsGet(name?: string, page?: number, count?: number, options?: any): AxiosPromise<Array<SocialGroupIdDto>> {
            return localVarFp.socialGroupSocialGroupsGet(name, page, count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for socialGroupCreateSocialGroupsPost operation in SocialGroupApi.
 * @export
 * @interface SocialGroupApiSocialGroupCreateSocialGroupsPostRequest
 */
export interface SocialGroupApiSocialGroupCreateSocialGroupsPostRequest {
    /**
     * 
     * @type {SocialGroupDto}
     * @memberof SocialGroupApiSocialGroupCreateSocialGroupsPost
     */
    readonly socialGroupDto?: SocialGroupDto
}

/**
 * Request parameters for socialGroupSocialGroupsAllGet operation in SocialGroupApi.
 * @export
 * @interface SocialGroupApiSocialGroupSocialGroupsAllGetRequest
 */
export interface SocialGroupApiSocialGroupSocialGroupsAllGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SocialGroupApiSocialGroupSocialGroupsAllGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SocialGroupApiSocialGroupSocialGroupsAllGet
     */
    readonly count?: number
}

/**
 * Request parameters for socialGroupSocialGroupsGet operation in SocialGroupApi.
 * @export
 * @interface SocialGroupApiSocialGroupSocialGroupsGetRequest
 */
export interface SocialGroupApiSocialGroupSocialGroupsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SocialGroupApiSocialGroupSocialGroupsGet
     */
    readonly name?: string

    /**
     * 
     * @type {number}
     * @memberof SocialGroupApiSocialGroupSocialGroupsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SocialGroupApiSocialGroupSocialGroupsGet
     */
    readonly count?: number
}

/**
 * SocialGroupApi - object-oriented interface
 * @export
 * @class SocialGroupApi
 * @extends {BaseAPI}
 */
export class SocialGroupApi extends BaseAPI {
    /**
     * 
     * @param {SocialGroupApiSocialGroupCreateSocialGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialGroupApi
     */
    public socialGroupCreateSocialGroupsPost(requestParameters: SocialGroupApiSocialGroupCreateSocialGroupsPostRequest = {}, options?: AxiosRequestConfig) {
        return SocialGroupApiFp(this.configuration).socialGroupCreateSocialGroupsPost(requestParameters.socialGroupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialGroupApiSocialGroupSocialGroupsAllGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialGroupApi
     */
    public socialGroupSocialGroupsAllGet(requestParameters: SocialGroupApiSocialGroupSocialGroupsAllGetRequest = {}, options?: AxiosRequestConfig) {
        return SocialGroupApiFp(this.configuration).socialGroupSocialGroupsAllGet(requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialGroupApiSocialGroupSocialGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialGroupApi
     */
    public socialGroupSocialGroupsGet(requestParameters: SocialGroupApiSocialGroupSocialGroupsGetRequest = {}, options?: AxiosRequestConfig) {
        return SocialGroupApiFp(this.configuration).socialGroupSocialGroupsGet(requestParameters.name, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUsersGet: async (name?: string, page?: number, count?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUsersGet(name?: string, page?: number, count?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUsersGet(name, page, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUsersGet(name?: string, page?: number, count?: number, options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.usersUsersGet(name, page, count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersUsersGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersUsersGetRequest
 */
export interface UsersApiUsersUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUsersGet
     */
    readonly name?: string

    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersUsersGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersUsersGet
     */
    readonly count?: number
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiUsersUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUsersGet(requestParameters: UsersApiUsersUsersGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUsersGet(requestParameters.name, requestParameters.page, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }
}


