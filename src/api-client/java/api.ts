/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BenefitEntity
 */
export interface BenefitEntity {
    /**
     * 
     * @type {string}
     * @memberof BenefitEntity
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof BenefitEntity
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof BenefitEntity
     */
    'ideaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BenefitEntity
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface IdeaEntity
 */
export interface IdeaEntity {
    /**
     * 
     * @type {boolean}
     * @memberof IdeaEntity
     */
    'anonymous'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IdeaEntity
     */
    'authorId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IdeaEntity
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdeaEntity
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdeaEntity
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof IdeaEntity
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdeaEntity
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdeaEntity
     */
    'statusDescription'?: string;
    /**
     * 
     * @type {SubjectEntity}
     * @memberof IdeaEntity
     */
    'subject'?: SubjectEntity;
    /**
     * 
     * @type {string}
     * @memberof IdeaEntity
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface SubjectEntity
 */
export interface SubjectEntity {
    /**
     * 
     * @type {number}
     * @memberof SubjectEntity
     */
    'audience'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubjectEntity
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubjectEntity
     */
    'name'?: string;
}

/**
 * IdeaControllerApi - axios parameter creator
 * @export
 */
export const IdeaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAllIdeas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIdeasUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ideas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBenefitsForIdea
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitsForIdeaUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBenefitsForIdeaUsingGET', 'id', id)
            const localVarPath = `/ideas/{id}/benefits`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getIdeaById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeaByIdUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIdeaByIdUsingGET', 'id', id)
            const localVarPath = `/ideas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getIdeasBySubject
         * @param {string} subject subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeasBySubjectUsingGET: async (subject: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('getIdeasBySubjectUsingGET', 'subject', subject)
            const localVarPath = `/ideas/by-subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdeaControllerApi - functional programming interface
 * @export
 */
export const IdeaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdeaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getAllIdeas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIdeasUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdeaEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIdeasUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBenefitsForIdea
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBenefitsForIdeaUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BenefitEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBenefitsForIdeaUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getIdeaById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdeaByIdUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeaEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdeaByIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getIdeasBySubject
         * @param {string} subject subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdeasBySubjectUsingGET(subject: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdeaEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdeasBySubjectUsingGET(subject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdeaControllerApi - factory interface
 * @export
 */
export const IdeaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdeaControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary getAllIdeas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIdeasUsingGET(options?: any): AxiosPromise<Array<IdeaEntity>> {
            return localVarFp.getAllIdeasUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBenefitsForIdea
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitsForIdeaUsingGET(id: number, options?: any): AxiosPromise<Array<BenefitEntity>> {
            return localVarFp.getBenefitsForIdeaUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getIdeaById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeaByIdUsingGET(id: number, options?: any): AxiosPromise<IdeaEntity> {
            return localVarFp.getIdeaByIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getIdeasBySubject
         * @param {string} subject subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeasBySubjectUsingGET(subject: string, options?: any): AxiosPromise<Array<IdeaEntity>> {
            return localVarFp.getIdeasBySubjectUsingGET(subject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBenefitsForIdeaUsingGET operation in IdeaControllerApi.
 * @export
 * @interface IdeaControllerApiGetBenefitsForIdeaUsingGETRequest
 */
export interface IdeaControllerApiGetBenefitsForIdeaUsingGETRequest {
    /**
     * id
     * @type {number}
     * @memberof IdeaControllerApiGetBenefitsForIdeaUsingGET
     */
    readonly id: number
}

/**
 * Request parameters for getIdeaByIdUsingGET operation in IdeaControllerApi.
 * @export
 * @interface IdeaControllerApiGetIdeaByIdUsingGETRequest
 */
export interface IdeaControllerApiGetIdeaByIdUsingGETRequest {
    /**
     * id
     * @type {number}
     * @memberof IdeaControllerApiGetIdeaByIdUsingGET
     */
    readonly id: number
}

/**
 * Request parameters for getIdeasBySubjectUsingGET operation in IdeaControllerApi.
 * @export
 * @interface IdeaControllerApiGetIdeasBySubjectUsingGETRequest
 */
export interface IdeaControllerApiGetIdeasBySubjectUsingGETRequest {
    /**
     * subject
     * @type {string}
     * @memberof IdeaControllerApiGetIdeasBySubjectUsingGET
     */
    readonly subject: string
}

/**
 * IdeaControllerApi - object-oriented interface
 * @export
 * @class IdeaControllerApi
 * @extends {BaseAPI}
 */
export class IdeaControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAllIdeas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaControllerApi
     */
    public getAllIdeasUsingGET(options?: AxiosRequestConfig) {
        return IdeaControllerApiFp(this.configuration).getAllIdeasUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBenefitsForIdea
     * @param {IdeaControllerApiGetBenefitsForIdeaUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaControllerApi
     */
    public getBenefitsForIdeaUsingGET(requestParameters: IdeaControllerApiGetBenefitsForIdeaUsingGETRequest, options?: AxiosRequestConfig) {
        return IdeaControllerApiFp(this.configuration).getBenefitsForIdeaUsingGET(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getIdeaById
     * @param {IdeaControllerApiGetIdeaByIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaControllerApi
     */
    public getIdeaByIdUsingGET(requestParameters: IdeaControllerApiGetIdeaByIdUsingGETRequest, options?: AxiosRequestConfig) {
        return IdeaControllerApiFp(this.configuration).getIdeaByIdUsingGET(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getIdeasBySubject
     * @param {IdeaControllerApiGetIdeasBySubjectUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaControllerApi
     */
    public getIdeasBySubjectUsingGET(requestParameters: IdeaControllerApiGetIdeasBySubjectUsingGETRequest, options?: AxiosRequestConfig) {
        return IdeaControllerApiFp(this.configuration).getIdeasBySubjectUsingGET(requestParameters.subject, options).then((request) => request(this.axios, this.basePath));
    }
}


