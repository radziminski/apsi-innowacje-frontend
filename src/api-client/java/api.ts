/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddRatingSettingsDto
 */
export interface AddRatingSettingsDto {
    /**
     * 
     * @type {Array<RatingSetting>}
     * @memberof AddRatingSettingsDto
     */
    'ratingSettings'?: Array<RatingSetting>;
}
/**
 * 
 * @export
 * @interface AddReviewDto
 */
export interface AddReviewDto {
    /**
     * 
     * @type {string}
     * @memberof AddReviewDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddReviewDto
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface BenefitDto
 */
export interface BenefitDto {
    /**
     * 
     * @type {string}
     * @memberof BenefitDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof BenefitDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BenefitDto
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface CostDto
 */
export interface CostDto {
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CostDto
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface DecisionDto
 */
export interface DecisionDto {
    /**
     * 
     * @type {string}
     * @memberof DecisionDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DecisionDto
     */
    'ideaStatus'?: DecisionDtoIdeaStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DecisionDtoIdeaStatusEnum {
    New = 'New',
    Accepted = 'Accepted',
    Rejected = 'Rejected',
    ReuqestForDetails = 'ReuqestForDetails',
    PutAway = 'PutAway'
}

/**
 * 
 * @export
 * @interface IdeaDto
 */
export interface IdeaDto {
    /**
     * 
     * @type {boolean}
     * @memberof IdeaDto
     */
    'alreadyReviewed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdeaDto
     */
    'anonymous'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdeaDto
     */
    'attachmentUrls'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof IdeaDto
     */
    'authorId'?: number;
    /**
     * 
     * @type {Array<BenefitDto>}
     * @memberof IdeaDto
     */
    'benefits'?: Array<BenefitDto>;
    /**
     * 
     * @type {boolean}
     * @memberof IdeaDto
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {Array<CostDto>}
     * @memberof IdeaDto
     */
    'costs'?: Array<CostDto>;
    /**
     * 
     * @type {string}
     * @memberof IdeaDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdeaDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof IdeaDto
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdeaDto
     */
    'keywords'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof IdeaDto
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdeaDto
     */
    'rejectsSum'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdeaDto
     */
    'status'?: IdeaDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof IdeaDto
     */
    'statusDescription'?: string;
    /**
     * 
     * @type {number}
     * @memberof IdeaDto
     */
    'subjectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdeaDto
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof IdeaDto
     */
    'votesSum'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum IdeaDtoStatusEnum {
    New = 'New',
    Accepted = 'Accepted',
    Rejected = 'Rejected',
    ReuqestForDetails = 'ReuqestForDetails',
    PutAway = 'PutAway'
}

/**
 * 
 * @export
 * @interface RatingSetting
 */
export interface RatingSetting {
    /**
     * 
     * @type {string}
     * @memberof RatingSetting
     */
    'userRole'?: RatingSettingUserRoleEnum;
    /**
     * 
     * @type {number}
     * @memberof RatingSetting
     */
    'weight'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum RatingSettingUserRoleEnum {
    Student = 'Student',
    Employee = 'Employee',
    Committee = 'Committee',
    Admin = 'Admin'
}

/**
 * 
 * @export
 * @interface RatingSettingDto
 */
export interface RatingSettingDto {
    /**
     * 
     * @type {number}
     * @memberof RatingSettingDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RatingSettingDto
     */
    'ideaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RatingSettingDto
     */
    'userRole'?: RatingSettingDtoUserRoleEnum;
    /**
     * 
     * @type {number}
     * @memberof RatingSettingDto
     */
    'weight'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum RatingSettingDtoUserRoleEnum {
    Student = 'Student',
    Employee = 'Employee',
    Committee = 'Committee',
    Admin = 'Admin'
}

/**
 * 
 * @export
 * @interface ReviewDto
 */
export interface ReviewDto {
    /**
     * 
     * @type {number}
     * @memberof ReviewDto
     */
    'authorId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ReviewDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewDto
     */
    'ideaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewDto
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface SubjectDto
 */
export interface SubjectDto {
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'audience'?: SubjectDtoAudienceEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof SubjectDto
     */
    'committeeMembers'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof SubjectDto
     */
    'done'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SubjectDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'name'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SubjectDtoAudienceEnum {
    Student = 'Student',
    Employee = 'Employee',
    Committee = 'Committee',
    Admin = 'Admin'
}


/**
 * BackendApiApi - axios parameter creator
 * @export
 */
export const BackendApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addDecisionForIdea
         * @param {number} ideaId ideaId
         * @param {DecisionDto} decisionDto decisionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDecisionForIdeaUsingPUT: async (ideaId: number, decisionDto: DecisionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('addDecisionForIdeaUsingPUT', 'ideaId', ideaId)
            // verify required parameter 'decisionDto' is not null or undefined
            assertParamExists('addDecisionForIdeaUsingPUT', 'decisionDto', decisionDto)
            const localVarPath = `/ideas/{ideaId}/decision`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(decisionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Idea with given id (also deletes all of its attachments, costs and benefits)
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdeaByIdUsingDELETE: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIdeaByIdUsingDELETE', 'id', id)
            const localVarPath = `/ideas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingSettingsByIdeaIdUsingDELETE: async (ideaId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('deleteRatingSettingsByIdeaIdUsingDELETE', 'ideaId', ideaId)
            const localVarPath = `/ideas/{ideaId}/rating-settings`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary downloadAttachmentById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachmentByIdUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadAttachmentByIdUsingGET', 'id', id)
            const localVarPath = `/attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get simplified DTO\'s of all ideas in database (without costs, benefits or attachments)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIdeasUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ideas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjectsUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of attachment id\'s belonging to given idea.
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentIdsByIdeaIdUsingGET: async (ideaId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('getAttachmentIdsByIdeaIdUsingGET', 'ideaId', ideaId)
            const localVarPath = `/ideas/{ideaId}/attachments`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get committee members for given subject
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitteeIdsBySubjectIdUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommitteeIdsBySubjectIdUsingGET', 'id', id)
            const localVarPath = `/subjects/{id}/committee`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCommitteeUsersCount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitteeUsersCountUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/votes/committee-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get idea with given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeaByIdUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIdeaByIdUsingGET', 'id', id)
            const localVarPath = `/ideas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all ideas with given subject
         * @param {number} subjectId subjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeasBySubjectIdUsingGET: async (subjectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectId' is not null or undefined
            assertParamExists('getIdeasBySubjectIdUsingGET', 'subjectId', subjectId)
            const localVarPath = `/ideas/by-subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (subjectId !== undefined) {
                localVarQueryParameter['subjectId'] = subjectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNumberOfAllowedVotesForSubject
         * @param {number} subjectId subjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfAllowedVotesForSubjectUsingGET: async (subjectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectId' is not null or undefined
            assertParamExists('getNumberOfAllowedVotesForSubjectUsingGET', 'subjectId', subjectId)
            const localVarPath = `/votes/{subjectId}`
                .replace(`{${"subjectId"}}`, encodeURIComponent(String(subjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingSettingsByIdeaIdUsingGET: async (ideaId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('getRatingSettingsByIdeaIdUsingGET', 'ideaId', ideaId)
            const localVarPath = `/ideas/{ideaId}/rating-settings`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReviewsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsByIdeaIdUsingGET: async (ideaId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('getReviewsByIdeaIdUsingGET', 'ideaId', ideaId)
            const localVarPath = `/ideas/{ideaId}/reviews`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReviewsByUserId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsByUserIdUsingGET: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getReviewsByUserIdUsingGET', 'userId', userId)
            const localVarPath = `/users/{userId}/reviews`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReviewsOfCurrentUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsOfCurrentUserUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subject with given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectByIdUsingGET: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubjectByIdUsingGET', 'id', id)
            const localVarPath = `/subjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ids of subjects that current user belongs to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectIdsForCurrentUserUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subjects/current-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all ideas with no category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUncategorizedIdeasUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ideas/uncategorized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save attachment for given ideaId
         * @param {number} ideaId ideaId
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAttachmentUsingPOST: async (ideaId: number, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('saveAttachmentUsingPOST', 'ideaId', ideaId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('saveAttachmentUsingPOST', 'file', file)
            const localVarPath = `/ideas/{ideaId}/attachments`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save Idea in database, returns id of saved entity
         * @param {IdeaDto} ideaDto ideaDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveIdeaUsingPOST: async (ideaDto: IdeaDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaDto' is not null or undefined
            assertParamExists('saveIdeaUsingPOST', 'ideaDto', ideaDto)
            const localVarPath = `/ideas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ideaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveRatingSatingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {AddRatingSettingsDto} addRatingSettingsDto addRatingSettingsDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRatingSatingsByIdeaIdUsingPOST: async (ideaId: number, addRatingSettingsDto: AddRatingSettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('saveRatingSatingsByIdeaIdUsingPOST', 'ideaId', ideaId)
            // verify required parameter 'addRatingSettingsDto' is not null or undefined
            assertParamExists('saveRatingSatingsByIdeaIdUsingPOST', 'addRatingSettingsDto', addRatingSettingsDto)
            const localVarPath = `/ideas/{ideaId}/rating-settings`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRatingSettingsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveReviewByIdeaId
         * @param {number} ideaId ideaId
         * @param {AddReviewDto} addReviewDto addReviewDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveReviewByIdeaIdUsingPOST: async (ideaId: number, addReviewDto: AddReviewDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('saveReviewByIdeaIdUsingPOST', 'ideaId', ideaId)
            // verify required parameter 'addReviewDto' is not null or undefined
            assertParamExists('saveReviewByIdeaIdUsingPOST', 'addReviewDto', addReviewDto)
            const localVarPath = `/ideas/{ideaId}/reviews`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addReviewDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save subject in database, returns id of saved entity
         * @param {SubjectDto} subjectDto subjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveSubjectUsingPOST: async (subjectDto: SubjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectDto' is not null or undefined
            assertParamExists('saveSubjectUsingPOST', 'subjectDto', subjectDto)
            const localVarPath = `/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateExistingRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {Array<RatingSettingDto>} newRatingSettings newRatingSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingRatingSettingsByIdeaIdUsingPUT: async (ideaId: number, newRatingSettings: Array<RatingSettingDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaId' is not null or undefined
            assertParamExists('updateExistingRatingSettingsByIdeaIdUsingPUT', 'ideaId', ideaId)
            // verify required parameter 'newRatingSettings' is not null or undefined
            assertParamExists('updateExistingRatingSettingsByIdeaIdUsingPUT', 'newRatingSettings', newRatingSettings)
            const localVarPath = `/ideas/{ideaId}/rating-settings`
                .replace(`{${"ideaId"}}`, encodeURIComponent(String(ideaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRatingSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateExistingReview
         * @param {ReviewDto} reviewDto reviewDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingReviewUsingPUT: async (reviewDto: ReviewDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewDto' is not null or undefined
            assertParamExists('updateExistingReviewUsingPUT', 'reviewDto', reviewDto)
            const localVarPath = `/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update existing Idea in database.
         * @param {IdeaDto} ideaDto ideaDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdeaUsingPUT: async (ideaDto: IdeaDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ideaDto' is not null or undefined
            assertParamExists('updateIdeaUsingPUT', 'ideaDto', ideaDto)
            const localVarPath = `/ideas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ideaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vote
         * @param {number} subjectId subjectId
         * @param {{ [key: string]: number; }} votes votes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteBySubjectIdUsingPOST: async (subjectId: number, votes: { [key: string]: number; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectId' is not null or undefined
            assertParamExists('voteBySubjectIdUsingPOST', 'subjectId', subjectId)
            // verify required parameter 'votes' is not null or undefined
            assertParamExists('voteBySubjectIdUsingPOST', 'votes', votes)
            const localVarPath = `/votes/{subjectId}`
                .replace(`{${"subjectId"}}`, encodeURIComponent(String(subjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(votes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary voteForUncategorizedIdea
         * @param {boolean} accept accept
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteForUncategorizedIdeaUsingPOST: async (accept: boolean, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('voteForUncategorizedIdeaUsingPOST', 'accept', accept)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('voteForUncategorizedIdeaUsingPOST', 'id', id)
            const localVarPath = `/votes/ideas/uncategorized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (accept !== undefined) {
                localVarQueryParameter['accept'] = accept;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackendApiApi - functional programming interface
 * @export
 */
export const BackendApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackendApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addDecisionForIdea
         * @param {number} ideaId ideaId
         * @param {DecisionDto} decisionDto decisionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDecisionForIdeaUsingPUT(ideaId: number, decisionDto: DecisionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDecisionForIdeaUsingPUT(ideaId, decisionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Idea with given id (also deletes all of its attachments, costs and benefits)
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIdeaByIdUsingDELETE(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIdeaByIdUsingDELETE(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRatingSettingsByIdeaIdUsingDELETE(ideaId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRatingSettingsByIdeaIdUsingDELETE(ideaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary downloadAttachmentById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAttachmentByIdUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadAttachmentByIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get simplified DTO\'s of all ideas in database (without costs, benefits or attachments)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIdeasUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdeaDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIdeasUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubjectsUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubjectsUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of attachment id\'s belonging to given idea.
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentIdsByIdeaIdUsingGET(ideaId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentIdsByIdeaIdUsingGET(ideaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get committee members for given subject
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommitteeIdsBySubjectIdUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommitteeIdsBySubjectIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCommitteeUsersCount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommitteeUsersCountUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommitteeUsersCountUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get idea with given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdeaByIdUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdeaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdeaByIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all ideas with given subject
         * @param {number} subjectId subjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdeasBySubjectIdUsingGET(subjectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdeaDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdeasBySubjectIdUsingGET(subjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNumberOfAllowedVotesForSubject
         * @param {number} subjectId subjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberOfAllowedVotesForSubjectUsingGET(subjectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberOfAllowedVotesForSubjectUsingGET(subjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRatingSettingsByIdeaIdUsingGET(ideaId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RatingSettingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRatingSettingsByIdeaIdUsingGET(ideaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getReviewsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewsByIdeaIdUsingGET(ideaId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewsByIdeaIdUsingGET(ideaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getReviewsByUserId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewsByUserIdUsingGET(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewsByUserIdUsingGET(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getReviewsOfCurrentUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewsOfCurrentUserUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewsOfCurrentUserUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subject with given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectByIdUsingGET(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectByIdUsingGET(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ids of subjects that current user belongs to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectIdsForCurrentUserUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectIdsForCurrentUserUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all ideas with no category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUncategorizedIdeasUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdeaDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUncategorizedIdeasUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save attachment for given ideaId
         * @param {number} ideaId ideaId
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAttachmentUsingPOST(ideaId: number, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAttachmentUsingPOST(ideaId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save Idea in database, returns id of saved entity
         * @param {IdeaDto} ideaDto ideaDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveIdeaUsingPOST(ideaDto: IdeaDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveIdeaUsingPOST(ideaDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary saveRatingSatingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {AddRatingSettingsDto} addRatingSettingsDto addRatingSettingsDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveRatingSatingsByIdeaIdUsingPOST(ideaId: number, addRatingSettingsDto: AddRatingSettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveRatingSatingsByIdeaIdUsingPOST(ideaId, addRatingSettingsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary saveReviewByIdeaId
         * @param {number} ideaId ideaId
         * @param {AddReviewDto} addReviewDto addReviewDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveReviewByIdeaIdUsingPOST(ideaId: number, addReviewDto: AddReviewDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveReviewByIdeaIdUsingPOST(ideaId, addReviewDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save subject in database, returns id of saved entity
         * @param {SubjectDto} subjectDto subjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveSubjectUsingPOST(subjectDto: SubjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveSubjectUsingPOST(subjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateExistingRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {Array<RatingSettingDto>} newRatingSettings newRatingSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingRatingSettingsByIdeaIdUsingPUT(ideaId: number, newRatingSettings: Array<RatingSettingDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingRatingSettingsByIdeaIdUsingPUT(ideaId, newRatingSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateExistingReview
         * @param {ReviewDto} reviewDto reviewDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingReviewUsingPUT(reviewDto: ReviewDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingReviewUsingPUT(reviewDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update existing Idea in database.
         * @param {IdeaDto} ideaDto ideaDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdeaUsingPUT(ideaDto: IdeaDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdeaUsingPUT(ideaDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Vote
         * @param {number} subjectId subjectId
         * @param {{ [key: string]: number; }} votes votes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voteBySubjectIdUsingPOST(subjectId: number, votes: { [key: string]: number; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voteBySubjectIdUsingPOST(subjectId, votes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary voteForUncategorizedIdea
         * @param {boolean} accept accept
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voteForUncategorizedIdeaUsingPOST(accept: boolean, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voteForUncategorizedIdeaUsingPOST(accept, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BackendApiApi - factory interface
 * @export
 */
export const BackendApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackendApiApiFp(configuration)
    return {
        /**
         * 
         * @summary addDecisionForIdea
         * @param {number} ideaId ideaId
         * @param {DecisionDto} decisionDto decisionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDecisionForIdeaUsingPUT(ideaId: number, decisionDto: DecisionDto, options?: any): AxiosPromise<void> {
            return localVarFp.addDecisionForIdeaUsingPUT(ideaId, decisionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Idea with given id (also deletes all of its attachments, costs and benefits)
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdeaByIdUsingDELETE(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIdeaByIdUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingSettingsByIdeaIdUsingDELETE(ideaId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRatingSettingsByIdeaIdUsingDELETE(ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary downloadAttachmentById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachmentByIdUsingGET(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.downloadAttachmentByIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get simplified DTO\'s of all ideas in database (without costs, benefits or attachments)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIdeasUsingGET(options?: any): AxiosPromise<Array<IdeaDto>> {
            return localVarFp.getAllIdeasUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjectsUsingGET(options?: any): AxiosPromise<Array<SubjectDto>> {
            return localVarFp.getAllSubjectsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of attachment id\'s belonging to given idea.
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentIdsByIdeaIdUsingGET(ideaId: number, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.getAttachmentIdsByIdeaIdUsingGET(ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get committee members for given subject
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitteeIdsBySubjectIdUsingGET(id: number, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.getCommitteeIdsBySubjectIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCommitteeUsersCount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitteeUsersCountUsingGET(options?: any): AxiosPromise<number> {
            return localVarFp.getCommitteeUsersCountUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get idea with given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeaByIdUsingGET(id: number, options?: any): AxiosPromise<IdeaDto> {
            return localVarFp.getIdeaByIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all ideas with given subject
         * @param {number} subjectId subjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdeasBySubjectIdUsingGET(subjectId: number, options?: any): AxiosPromise<Array<IdeaDto>> {
            return localVarFp.getIdeasBySubjectIdUsingGET(subjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNumberOfAllowedVotesForSubject
         * @param {number} subjectId subjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfAllowedVotesForSubjectUsingGET(subjectId: number, options?: any): AxiosPromise<number> {
            return localVarFp.getNumberOfAllowedVotesForSubjectUsingGET(subjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingSettingsByIdeaIdUsingGET(ideaId: number, options?: any): AxiosPromise<Array<RatingSettingDto>> {
            return localVarFp.getRatingSettingsByIdeaIdUsingGET(ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReviewsByIdeaId
         * @param {number} ideaId ideaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsByIdeaIdUsingGET(ideaId: number, options?: any): AxiosPromise<Array<ReviewDto>> {
            return localVarFp.getReviewsByIdeaIdUsingGET(ideaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReviewsByUserId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsByUserIdUsingGET(userId: number, options?: any): AxiosPromise<Array<ReviewDto>> {
            return localVarFp.getReviewsByUserIdUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReviewsOfCurrentUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsOfCurrentUserUsingGET(options?: any): AxiosPromise<Array<ReviewDto>> {
            return localVarFp.getReviewsOfCurrentUserUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subject with given id
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectByIdUsingGET(id: number, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.getSubjectByIdUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ids of subjects that current user belongs to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectIdsForCurrentUserUsingGET(options?: any): AxiosPromise<Array<SubjectDto>> {
            return localVarFp.getSubjectIdsForCurrentUserUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all ideas with no category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUncategorizedIdeasUsingGET(options?: any): AxiosPromise<Array<IdeaDto>> {
            return localVarFp.getUncategorizedIdeasUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save attachment for given ideaId
         * @param {number} ideaId ideaId
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAttachmentUsingPOST(ideaId: number, file: any, options?: any): AxiosPromise<number> {
            return localVarFp.saveAttachmentUsingPOST(ideaId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save Idea in database, returns id of saved entity
         * @param {IdeaDto} ideaDto ideaDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveIdeaUsingPOST(ideaDto: IdeaDto, options?: any): AxiosPromise<number> {
            return localVarFp.saveIdeaUsingPOST(ideaDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveRatingSatingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {AddRatingSettingsDto} addRatingSettingsDto addRatingSettingsDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRatingSatingsByIdeaIdUsingPOST(ideaId: number, addRatingSettingsDto: AddRatingSettingsDto, options?: any): AxiosPromise<void> {
            return localVarFp.saveRatingSatingsByIdeaIdUsingPOST(ideaId, addRatingSettingsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveReviewByIdeaId
         * @param {number} ideaId ideaId
         * @param {AddReviewDto} addReviewDto addReviewDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveReviewByIdeaIdUsingPOST(ideaId: number, addReviewDto: AddReviewDto, options?: any): AxiosPromise<number> {
            return localVarFp.saveReviewByIdeaIdUsingPOST(ideaId, addReviewDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save subject in database, returns id of saved entity
         * @param {SubjectDto} subjectDto subjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveSubjectUsingPOST(subjectDto: SubjectDto, options?: any): AxiosPromise<number> {
            return localVarFp.saveSubjectUsingPOST(subjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateExistingRatingSettingsByIdeaId
         * @param {number} ideaId ideaId
         * @param {Array<RatingSettingDto>} newRatingSettings newRatingSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingRatingSettingsByIdeaIdUsingPUT(ideaId: number, newRatingSettings: Array<RatingSettingDto>, options?: any): AxiosPromise<void> {
            return localVarFp.updateExistingRatingSettingsByIdeaIdUsingPUT(ideaId, newRatingSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateExistingReview
         * @param {ReviewDto} reviewDto reviewDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingReviewUsingPUT(reviewDto: ReviewDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateExistingReviewUsingPUT(reviewDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update existing Idea in database.
         * @param {IdeaDto} ideaDto ideaDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdeaUsingPUT(ideaDto: IdeaDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateIdeaUsingPUT(ideaDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vote
         * @param {number} subjectId subjectId
         * @param {{ [key: string]: number; }} votes votes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteBySubjectIdUsingPOST(subjectId: number, votes: { [key: string]: number; }, options?: any): AxiosPromise<void> {
            return localVarFp.voteBySubjectIdUsingPOST(subjectId, votes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary voteForUncategorizedIdea
         * @param {boolean} accept accept
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteForUncategorizedIdeaUsingPOST(accept: boolean, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.voteForUncategorizedIdeaUsingPOST(accept, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDecisionForIdeaUsingPUT operation in BackendApiApi.
 * @export
 * @interface BackendApiApiAddDecisionForIdeaUsingPUTRequest
 */
export interface BackendApiApiAddDecisionForIdeaUsingPUTRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiAddDecisionForIdeaUsingPUT
     */
    readonly ideaId: number

    /**
     * decisionDto
     * @type {DecisionDto}
     * @memberof BackendApiApiAddDecisionForIdeaUsingPUT
     */
    readonly decisionDto: DecisionDto
}

/**
 * Request parameters for deleteIdeaByIdUsingDELETE operation in BackendApiApi.
 * @export
 * @interface BackendApiApiDeleteIdeaByIdUsingDELETERequest
 */
export interface BackendApiApiDeleteIdeaByIdUsingDELETERequest {
    /**
     * id
     * @type {number}
     * @memberof BackendApiApiDeleteIdeaByIdUsingDELETE
     */
    readonly id: number
}

/**
 * Request parameters for deleteRatingSettingsByIdeaIdUsingDELETE operation in BackendApiApi.
 * @export
 * @interface BackendApiApiDeleteRatingSettingsByIdeaIdUsingDELETERequest
 */
export interface BackendApiApiDeleteRatingSettingsByIdeaIdUsingDELETERequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiDeleteRatingSettingsByIdeaIdUsingDELETE
     */
    readonly ideaId: number
}

/**
 * Request parameters for downloadAttachmentByIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiDownloadAttachmentByIdUsingGETRequest
 */
export interface BackendApiApiDownloadAttachmentByIdUsingGETRequest {
    /**
     * id
     * @type {number}
     * @memberof BackendApiApiDownloadAttachmentByIdUsingGET
     */
    readonly id: number
}

/**
 * Request parameters for getAttachmentIdsByIdeaIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetAttachmentIdsByIdeaIdUsingGETRequest
 */
export interface BackendApiApiGetAttachmentIdsByIdeaIdUsingGETRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiGetAttachmentIdsByIdeaIdUsingGET
     */
    readonly ideaId: number
}

/**
 * Request parameters for getCommitteeIdsBySubjectIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetCommitteeIdsBySubjectIdUsingGETRequest
 */
export interface BackendApiApiGetCommitteeIdsBySubjectIdUsingGETRequest {
    /**
     * id
     * @type {number}
     * @memberof BackendApiApiGetCommitteeIdsBySubjectIdUsingGET
     */
    readonly id: number
}

/**
 * Request parameters for getIdeaByIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetIdeaByIdUsingGETRequest
 */
export interface BackendApiApiGetIdeaByIdUsingGETRequest {
    /**
     * id
     * @type {number}
     * @memberof BackendApiApiGetIdeaByIdUsingGET
     */
    readonly id: number
}

/**
 * Request parameters for getIdeasBySubjectIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetIdeasBySubjectIdUsingGETRequest
 */
export interface BackendApiApiGetIdeasBySubjectIdUsingGETRequest {
    /**
     * subjectId
     * @type {number}
     * @memberof BackendApiApiGetIdeasBySubjectIdUsingGET
     */
    readonly subjectId: number
}

/**
 * Request parameters for getNumberOfAllowedVotesForSubjectUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetNumberOfAllowedVotesForSubjectUsingGETRequest
 */
export interface BackendApiApiGetNumberOfAllowedVotesForSubjectUsingGETRequest {
    /**
     * subjectId
     * @type {number}
     * @memberof BackendApiApiGetNumberOfAllowedVotesForSubjectUsingGET
     */
    readonly subjectId: number
}

/**
 * Request parameters for getRatingSettingsByIdeaIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetRatingSettingsByIdeaIdUsingGETRequest
 */
export interface BackendApiApiGetRatingSettingsByIdeaIdUsingGETRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiGetRatingSettingsByIdeaIdUsingGET
     */
    readonly ideaId: number
}

/**
 * Request parameters for getReviewsByIdeaIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetReviewsByIdeaIdUsingGETRequest
 */
export interface BackendApiApiGetReviewsByIdeaIdUsingGETRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiGetReviewsByIdeaIdUsingGET
     */
    readonly ideaId: number
}

/**
 * Request parameters for getReviewsByUserIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetReviewsByUserIdUsingGETRequest
 */
export interface BackendApiApiGetReviewsByUserIdUsingGETRequest {
    /**
     * userId
     * @type {number}
     * @memberof BackendApiApiGetReviewsByUserIdUsingGET
     */
    readonly userId: number
}

/**
 * Request parameters for getSubjectByIdUsingGET operation in BackendApiApi.
 * @export
 * @interface BackendApiApiGetSubjectByIdUsingGETRequest
 */
export interface BackendApiApiGetSubjectByIdUsingGETRequest {
    /**
     * id
     * @type {number}
     * @memberof BackendApiApiGetSubjectByIdUsingGET
     */
    readonly id: number
}

/**
 * Request parameters for saveAttachmentUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiSaveAttachmentUsingPOSTRequest
 */
export interface BackendApiApiSaveAttachmentUsingPOSTRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiSaveAttachmentUsingPOST
     */
    readonly ideaId: number

    /**
     * file
     * @type {any}
     * @memberof BackendApiApiSaveAttachmentUsingPOST
     */
    readonly file: any
}

/**
 * Request parameters for saveIdeaUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiSaveIdeaUsingPOSTRequest
 */
export interface BackendApiApiSaveIdeaUsingPOSTRequest {
    /**
     * ideaDto
     * @type {IdeaDto}
     * @memberof BackendApiApiSaveIdeaUsingPOST
     */
    readonly ideaDto: IdeaDto
}

/**
 * Request parameters for saveRatingSatingsByIdeaIdUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiSaveRatingSatingsByIdeaIdUsingPOSTRequest
 */
export interface BackendApiApiSaveRatingSatingsByIdeaIdUsingPOSTRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiSaveRatingSatingsByIdeaIdUsingPOST
     */
    readonly ideaId: number

    /**
     * addRatingSettingsDto
     * @type {AddRatingSettingsDto}
     * @memberof BackendApiApiSaveRatingSatingsByIdeaIdUsingPOST
     */
    readonly addRatingSettingsDto: AddRatingSettingsDto
}

/**
 * Request parameters for saveReviewByIdeaIdUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiSaveReviewByIdeaIdUsingPOSTRequest
 */
export interface BackendApiApiSaveReviewByIdeaIdUsingPOSTRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiSaveReviewByIdeaIdUsingPOST
     */
    readonly ideaId: number

    /**
     * addReviewDto
     * @type {AddReviewDto}
     * @memberof BackendApiApiSaveReviewByIdeaIdUsingPOST
     */
    readonly addReviewDto: AddReviewDto
}

/**
 * Request parameters for saveSubjectUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiSaveSubjectUsingPOSTRequest
 */
export interface BackendApiApiSaveSubjectUsingPOSTRequest {
    /**
     * subjectDto
     * @type {SubjectDto}
     * @memberof BackendApiApiSaveSubjectUsingPOST
     */
    readonly subjectDto: SubjectDto
}

/**
 * Request parameters for updateExistingRatingSettingsByIdeaIdUsingPUT operation in BackendApiApi.
 * @export
 * @interface BackendApiApiUpdateExistingRatingSettingsByIdeaIdUsingPUTRequest
 */
export interface BackendApiApiUpdateExistingRatingSettingsByIdeaIdUsingPUTRequest {
    /**
     * ideaId
     * @type {number}
     * @memberof BackendApiApiUpdateExistingRatingSettingsByIdeaIdUsingPUT
     */
    readonly ideaId: number

    /**
     * newRatingSettings
     * @type {Array<RatingSettingDto>}
     * @memberof BackendApiApiUpdateExistingRatingSettingsByIdeaIdUsingPUT
     */
    readonly newRatingSettings: Array<RatingSettingDto>
}

/**
 * Request parameters for updateExistingReviewUsingPUT operation in BackendApiApi.
 * @export
 * @interface BackendApiApiUpdateExistingReviewUsingPUTRequest
 */
export interface BackendApiApiUpdateExistingReviewUsingPUTRequest {
    /**
     * reviewDto
     * @type {ReviewDto}
     * @memberof BackendApiApiUpdateExistingReviewUsingPUT
     */
    readonly reviewDto: ReviewDto
}

/**
 * Request parameters for updateIdeaUsingPUT operation in BackendApiApi.
 * @export
 * @interface BackendApiApiUpdateIdeaUsingPUTRequest
 */
export interface BackendApiApiUpdateIdeaUsingPUTRequest {
    /**
     * ideaDto
     * @type {IdeaDto}
     * @memberof BackendApiApiUpdateIdeaUsingPUT
     */
    readonly ideaDto: IdeaDto
}

/**
 * Request parameters for voteBySubjectIdUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiVoteBySubjectIdUsingPOSTRequest
 */
export interface BackendApiApiVoteBySubjectIdUsingPOSTRequest {
    /**
     * subjectId
     * @type {number}
     * @memberof BackendApiApiVoteBySubjectIdUsingPOST
     */
    readonly subjectId: number

    /**
     * votes
     * @type {{ [key: string]: number; }}
     * @memberof BackendApiApiVoteBySubjectIdUsingPOST
     */
    readonly votes: { [key: string]: number; }
}

/**
 * Request parameters for voteForUncategorizedIdeaUsingPOST operation in BackendApiApi.
 * @export
 * @interface BackendApiApiVoteForUncategorizedIdeaUsingPOSTRequest
 */
export interface BackendApiApiVoteForUncategorizedIdeaUsingPOSTRequest {
    /**
     * accept
     * @type {boolean}
     * @memberof BackendApiApiVoteForUncategorizedIdeaUsingPOST
     */
    readonly accept: boolean

    /**
     * id
     * @type {number}
     * @memberof BackendApiApiVoteForUncategorizedIdeaUsingPOST
     */
    readonly id: number
}

/**
 * BackendApiApi - object-oriented interface
 * @export
 * @class BackendApiApi
 * @extends {BaseAPI}
 */
export class BackendApiApi extends BaseAPI {
    /**
     * 
     * @summary addDecisionForIdea
     * @param {BackendApiApiAddDecisionForIdeaUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public addDecisionForIdeaUsingPUT(requestParameters: BackendApiApiAddDecisionForIdeaUsingPUTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).addDecisionForIdeaUsingPUT(requestParameters.ideaId, requestParameters.decisionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Idea with given id (also deletes all of its attachments, costs and benefits)
     * @param {BackendApiApiDeleteIdeaByIdUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public deleteIdeaByIdUsingDELETE(requestParameters: BackendApiApiDeleteIdeaByIdUsingDELETERequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).deleteIdeaByIdUsingDELETE(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteRatingSettingsByIdeaId
     * @param {BackendApiApiDeleteRatingSettingsByIdeaIdUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public deleteRatingSettingsByIdeaIdUsingDELETE(requestParameters: BackendApiApiDeleteRatingSettingsByIdeaIdUsingDELETERequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).deleteRatingSettingsByIdeaIdUsingDELETE(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary downloadAttachmentById
     * @param {BackendApiApiDownloadAttachmentByIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public downloadAttachmentByIdUsingGET(requestParameters: BackendApiApiDownloadAttachmentByIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).downloadAttachmentByIdUsingGET(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get simplified DTO\'s of all ideas in database (without costs, benefits or attachments)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getAllIdeasUsingGET(options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getAllIdeasUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getAllSubjectsUsingGET(options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getAllSubjectsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of attachment id\'s belonging to given idea.
     * @param {BackendApiApiGetAttachmentIdsByIdeaIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getAttachmentIdsByIdeaIdUsingGET(requestParameters: BackendApiApiGetAttachmentIdsByIdeaIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getAttachmentIdsByIdeaIdUsingGET(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get committee members for given subject
     * @param {BackendApiApiGetCommitteeIdsBySubjectIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getCommitteeIdsBySubjectIdUsingGET(requestParameters: BackendApiApiGetCommitteeIdsBySubjectIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getCommitteeIdsBySubjectIdUsingGET(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCommitteeUsersCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getCommitteeUsersCountUsingGET(options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getCommitteeUsersCountUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get idea with given id
     * @param {BackendApiApiGetIdeaByIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getIdeaByIdUsingGET(requestParameters: BackendApiApiGetIdeaByIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getIdeaByIdUsingGET(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all ideas with given subject
     * @param {BackendApiApiGetIdeasBySubjectIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getIdeasBySubjectIdUsingGET(requestParameters: BackendApiApiGetIdeasBySubjectIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getIdeasBySubjectIdUsingGET(requestParameters.subjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNumberOfAllowedVotesForSubject
     * @param {BackendApiApiGetNumberOfAllowedVotesForSubjectUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getNumberOfAllowedVotesForSubjectUsingGET(requestParameters: BackendApiApiGetNumberOfAllowedVotesForSubjectUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getNumberOfAllowedVotesForSubjectUsingGET(requestParameters.subjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRatingSettingsByIdeaId
     * @param {BackendApiApiGetRatingSettingsByIdeaIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getRatingSettingsByIdeaIdUsingGET(requestParameters: BackendApiApiGetRatingSettingsByIdeaIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getRatingSettingsByIdeaIdUsingGET(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReviewsByIdeaId
     * @param {BackendApiApiGetReviewsByIdeaIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getReviewsByIdeaIdUsingGET(requestParameters: BackendApiApiGetReviewsByIdeaIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getReviewsByIdeaIdUsingGET(requestParameters.ideaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReviewsByUserId
     * @param {BackendApiApiGetReviewsByUserIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getReviewsByUserIdUsingGET(requestParameters: BackendApiApiGetReviewsByUserIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getReviewsByUserIdUsingGET(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReviewsOfCurrentUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getReviewsOfCurrentUserUsingGET(options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getReviewsOfCurrentUserUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subject with given id
     * @param {BackendApiApiGetSubjectByIdUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getSubjectByIdUsingGET(requestParameters: BackendApiApiGetSubjectByIdUsingGETRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getSubjectByIdUsingGET(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ids of subjects that current user belongs to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getSubjectIdsForCurrentUserUsingGET(options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getSubjectIdsForCurrentUserUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all ideas with no category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public getUncategorizedIdeasUsingGET(options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).getUncategorizedIdeasUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save attachment for given ideaId
     * @param {BackendApiApiSaveAttachmentUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public saveAttachmentUsingPOST(requestParameters: BackendApiApiSaveAttachmentUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).saveAttachmentUsingPOST(requestParameters.ideaId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save Idea in database, returns id of saved entity
     * @param {BackendApiApiSaveIdeaUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public saveIdeaUsingPOST(requestParameters: BackendApiApiSaveIdeaUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).saveIdeaUsingPOST(requestParameters.ideaDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveRatingSatingsByIdeaId
     * @param {BackendApiApiSaveRatingSatingsByIdeaIdUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public saveRatingSatingsByIdeaIdUsingPOST(requestParameters: BackendApiApiSaveRatingSatingsByIdeaIdUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).saveRatingSatingsByIdeaIdUsingPOST(requestParameters.ideaId, requestParameters.addRatingSettingsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveReviewByIdeaId
     * @param {BackendApiApiSaveReviewByIdeaIdUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public saveReviewByIdeaIdUsingPOST(requestParameters: BackendApiApiSaveReviewByIdeaIdUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).saveReviewByIdeaIdUsingPOST(requestParameters.ideaId, requestParameters.addReviewDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save subject in database, returns id of saved entity
     * @param {BackendApiApiSaveSubjectUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public saveSubjectUsingPOST(requestParameters: BackendApiApiSaveSubjectUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).saveSubjectUsingPOST(requestParameters.subjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateExistingRatingSettingsByIdeaId
     * @param {BackendApiApiUpdateExistingRatingSettingsByIdeaIdUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public updateExistingRatingSettingsByIdeaIdUsingPUT(requestParameters: BackendApiApiUpdateExistingRatingSettingsByIdeaIdUsingPUTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).updateExistingRatingSettingsByIdeaIdUsingPUT(requestParameters.ideaId, requestParameters.newRatingSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateExistingReview
     * @param {BackendApiApiUpdateExistingReviewUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public updateExistingReviewUsingPUT(requestParameters: BackendApiApiUpdateExistingReviewUsingPUTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).updateExistingReviewUsingPUT(requestParameters.reviewDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update existing Idea in database.
     * @param {BackendApiApiUpdateIdeaUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public updateIdeaUsingPUT(requestParameters: BackendApiApiUpdateIdeaUsingPUTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).updateIdeaUsingPUT(requestParameters.ideaDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vote
     * @param {BackendApiApiVoteBySubjectIdUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public voteBySubjectIdUsingPOST(requestParameters: BackendApiApiVoteBySubjectIdUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).voteBySubjectIdUsingPOST(requestParameters.subjectId, requestParameters.votes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary voteForUncategorizedIdea
     * @param {BackendApiApiVoteForUncategorizedIdeaUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackendApiApi
     */
    public voteForUncategorizedIdeaUsingPOST(requestParameters: BackendApiApiVoteForUncategorizedIdeaUsingPOSTRequest, options?: AxiosRequestConfig) {
        return BackendApiApiFp(this.configuration).voteForUncategorizedIdeaUsingPOST(requestParameters.accept, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


